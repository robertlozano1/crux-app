import { useState } from "react";
import "./App.css";
import VitalsCard from "./VitalsCard";

function App() {
  const [domain, setDomain] = useState("");
  const [results, setResults] = useState(null);
  const [rawResponse, setRawResponse] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [formFactor, setFormFactor] = useState("PHONE");

  const formatUrl = (domain) => {
    // Remove protocol if present
    let cleanDomain = domain.replace(/^(https?:\/\/)?/, "");
    // Remove any paths, query parameters, etc.
    cleanDomain = cleanDomain.split("/")[0];
    return `https://${cleanDomain}`;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setResults(null);
    try {
      const apiKey = "AIzaSyDpsObJy_AXEpfqrUVGXM0uMQmAS8Dju3o";
      const cleanUrl = formatUrl(domain);
      if (!cleanUrl) {
        throw new Error("Please enter a valid domain name");
      }

      const url = `https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=${apiKey}`;
      const requestBody = {
        url: cleanUrl,
        formFactor: formFactor
      };
      console.log("Making API request to:", url);
      console.log("Request body:", JSON.stringify(requestBody, null, 2));

      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        body: JSON.stringify(requestBody)
      });

      console.log("Response status:", response.status);
      const data = await response.json();
      console.log("API Response:", data);

      if (!response.ok) {
        throw new Error(
          `API Error: ${data.error?.message || "Failed to fetch data"}`
        );
      }

      setRawResponse(data);

      // Parse Core Web Vitals using percentiles.p75
      const metrics = data.record?.metrics || {};
      const getValue = (metricValue) => {
        if (!metricValue) return null;
        return Number(metricValue);
      };

      const vitalsResults = {
        LCP: getValue(metrics.largest_contentful_paint?.percentiles?.p75),
        CLS: getValue(metrics.cumulative_layout_shift?.percentiles?.p75),
        INP: getValue(metrics.interaction_to_next_paint?.percentiles?.p75),
        TTFB: getValue(metrics.experimental_time_to_first_byte?.percentiles?.p75)
      };

      // Filter out null values
      const validResults = Object.entries(vitalsResults).reduce((acc, [key, value]) => {
        if (value !== null) {
          acc[key] = value;
        }
        return acc;
      }, {});

      setResults(validResults);
    } catch (error) {
      console.error("Error details:", error);
      let errorMessage = "Could not fetch Core Web Vitals. ";
      if (error.message.includes("API key not found")) {
        errorMessage += "API key is missing. Please check your environment setup.";
      } else if (error.message.includes("Invalid Value")) {
        errorMessage += "Please enter a valid domain name (e.g., example.com).";
      } else if (error.message.includes("No data found")) {
        errorMessage += "No Core Web Vitals data available for this domain.";
      } else if (!navigator.onLine) {
        errorMessage += "Please check your internet connection.";
      } else {
        errorMessage += error.message;
      }
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="crux-app-dashboard">
      <h1 className="dashboard-title">Core Web Vitals Checker</h1>
      <form className="dashboard-form" onSubmit={handleSubmit}>
        <div className="form-row">
          <input
            type="text"
            className="dashboard-input"
            placeholder="Enter domain name (e.g. example.com)"
            value={domain}
            onChange={(e) => setDomain(e.target.value)}
            required
          />
          <button className="dashboard-btn" type="submit" disabled={loading}>
            {loading ? "Checking..." : "Fetch"}
          </button>
        </div>
        <div className="shortcut-row">
          <span className="shortcut-label">Examples:</span>
          {["www.homes.com", "www.apartments.com", "www.loopnet.com"].map((d) => (
            <button
              key={d}
              type="button"
              className="shortcut-btn"
              onClick={() => setDomain(d)}
            >
              {d}
            </button>
          ))}
        </div>
        <div className="form-row">
          <span className="form-factor-label">Form Factor:</span>
          <select
            className="form-factor-select"
            value={formFactor}
            onChange={(e) => setFormFactor(e.target.value)}
          >
            <option value="DESKTOP">Desktop</option>
            <option value="PHONE">Phone</option>
          </select>
        </div>
      </form>
      {error && <div className="dashboard-error">{error}</div>}
      {results && (
        <div className="dashboard-results">
          <h2>
            Results for <span className="dashboard-domain">{domain}</span>
          </h2>
          <div className="vitals-grid">
            {Object.entries(results).map(([metric, value]) => (
              <VitalsCard key={metric} metric={metric} value={value} />
            ))}
          </div>
          <details style={{ marginTop: "24px", textAlign: "left" }}>
            <summary>Show raw API response</summary>
            <pre
              style={{
                fontSize: "0.95em",
                background: "#f4f4f4",
                padding: "14px",
                borderRadius: "10px",
                overflowX: "auto"
              }}
            >
              {JSON.stringify(rawResponse, null, 2)}
            </pre>
          </details>
        </div>
      )}
    </div>
  );
}

export default App;